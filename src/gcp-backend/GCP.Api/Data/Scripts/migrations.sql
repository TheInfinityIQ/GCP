CREATE TABLE IF NOT EXISTS __ef_migrations_history (
    migration_id character varying(150) NOT NULL,
    product_version character varying(32) NOT NULL,
    CONSTRAINT pk___ef_migrations_history PRIMARY KEY (migration_id)
);

START TRANSACTION;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE role (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        name character varying(256) NULL,
        normalized_name character varying(256) NULL,
        concurrency_stamp text NULL,
        CONSTRAINT pk_role PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE "user" (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        display_name character varying(30) NOT NULL,
        user_name character varying(256) NULL,
        normalized_user_name character varying(256) NULL,
        email character varying(256) NULL,
        normalized_email character varying(256) NULL,
        email_confirmed boolean NOT NULL,
        password_hash text NULL,
        security_stamp text NULL,
        concurrency_stamp text NULL,
        phone_number text NULL,
        phone_number_confirmed boolean NOT NULL,
        two_factor_enabled boolean NOT NULL,
        lockout_end timestamp with time zone NULL,
        lockout_enabled boolean NOT NULL,
        access_failed_count integer NOT NULL,
        CONSTRAINT pk_user PRIMARY KEY (id)
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE role_claim (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        role_id integer NOT NULL,
        claim_type text NULL,
        claim_value text NULL,
        CONSTRAINT pk_role_claim PRIMARY KEY (id),
        CONSTRAINT fk_role_claim_asp_net_roles_role_id FOREIGN KEY (role_id) REFERENCES role (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE user_claim (
        id integer GENERATED BY DEFAULT AS IDENTITY,
        user_id integer NOT NULL,
        claim_type text NULL,
        claim_value text NULL,
        CONSTRAINT pk_user_claim PRIMARY KEY (id),
        CONSTRAINT fk_user_claim_asp_net_users_user_id FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE user_login (
        login_provider text NOT NULL,
        provider_key text NOT NULL,
        provider_display_name text NULL,
        user_id integer NOT NULL,
        CONSTRAINT pk_user_login PRIMARY KEY (login_provider, provider_key),
        CONSTRAINT fk_user_login_user_user_id FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE user_role (
        user_id integer NOT NULL,
        role_id integer NOT NULL,
        CONSTRAINT pk_user_role PRIMARY KEY (user_id, role_id),
        CONSTRAINT fk_user_role_role_role_id FOREIGN KEY (role_id) REFERENCES role (id) ON DELETE CASCADE,
        CONSTRAINT fk_user_role_user_user_id FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE TABLE user_token (
        user_id integer NOT NULL,
        login_provider text NOT NULL,
        name text NOT NULL,
        value text NULL,
        CONSTRAINT pk_user_token PRIMARY KEY (user_id, login_provider, name),
        CONSTRAINT fk_user_token_user_user_id FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE UNIQUE INDEX "RoleNameIndex" ON role (normalized_name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE INDEX ix_role_claim_role_id ON role_claim (role_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE INDEX "EmailIndex" ON "user" (normalized_email);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE UNIQUE INDEX ix_user_display_name ON "user" (display_name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE UNIQUE INDEX "UserNameIndex" ON "user" (normalized_user_name);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE INDEX ix_user_claim_user_id ON user_claim (user_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE INDEX ix_user_login_user_id ON user_login (user_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    CREATE INDEX ix_user_role_role_id ON user_role (role_id);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM __ef_migrations_history WHERE "migration_id" = '20220402031811_InitialCreate') THEN
    INSERT INTO __ef_migrations_history (migration_id, product_version)
    VALUES ('20220402031811_InitialCreate', '7.0.0-preview.2.22153.1');
    END IF;
END $EF$;
COMMIT;

